name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  secret-scan:
    name: Secret Scanning with Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate secret detection

      - name: Run Gitleaks secret scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --redact --report=gitleaks-report.json --report-format=json --exit-code 1

      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json


  detect-changes:
    name: Detect Changed Backend Services
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed backend services dynamically
        id: set-matrix
        shell: bash
        run: |
          echo "Detecting changed backend services..."
          git fetch origin --depth=2

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
          else
            BASE_SHA=$(git rev-parse HEAD^)
          fi

          echo "Base SHA: $BASE_SHA"
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD || true)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          SERVICES=()
          for dir in $(ls backend); do
            if [ -d "backend/$dir" ]; then
              if echo "$CHANGED_FILES" | grep -q "^backend/$dir/"; then
                SERVICES+=("\"$dir\"")
              fi
            fi
          done

          if [ ${#SERVICES[@]} -eq 0 ]; then
            echo "No changed backend services detected â€” skipping build."
            MATRIX_JSON="{\"service\":[]}"
          else
            MATRIX_JSON="{\"service\":[$(IFS=,; echo "${SERVICES[*]}")]}"
          fi

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Detected services matrix: $MATRIX_JSON"


  build-test-push:
    name: Build, Test & Push Changed Services
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).service != '' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build & Test ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        run: |
          echo "Building and testing service: ${{ matrix.service }}"
          if [ -f "./mvnw" ]; then
            chmod +x mvnw
            ./mvnw -B clean verify -DskipTests=false -Dmaven.test.failure.ignore=true
          else
            mvn -B clean verify -DskipTests=false -Dmaven.test.failure.ignore=true
          fi


  sonar-scan:
    name: SonarQube Analysis (Changed Services)
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).service != '' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for Sonar history

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Run SonarQube scan for changed backend service
        run: |
          SERVICE=${{ matrix.service }}
          echo "Running SonarQube scan for $SERVICE"
          mvn -f "backend/$SERVICE/pom.xml" clean verify sonar:sonar \
            -DskipTests=true \
            -Dsonar.projectKey=konecta-erp-system-$SERVICE \
            -Dsonar.host.url=http://ec2-18-193-105-103.eu-central-1.compute.amazonaws.com:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=true

        
  build-push-images:
    name: Build, Scan & Push Docker Images
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).service != '' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Secrets
        run: |
          echo "DOCKER_USERNAME length: ${#DOCKER_USERNAME}"
          echo "DOCKER_PASSWORD length: ${#DOCKER_PASSWORD}"
          if [ -z "$DOCKER_USERNAME" ]; then
            echo "ERROR: DOCKER_USERNAME is empty!"
            exit 1
          fi
          if [ -z "$DOCKER_PASSWORD" ]; then
            echo "ERROR: DOCKER_PASSWORD is empty!"
            exit 1
          fi
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Image Tags
        id: vars
        env:
          SERVICE: ${{ matrix.service }}
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "DEBUG: DOCKER_USER='$DOCKER_USER'"
          echo "DEBUG: SERVICE='$SERVICE'"
          if [ -z "$DOCKER_USER" ]; then
            echo "ERROR: DOCKER_USERNAME secret is empty or not set!"
            exit 1
          fi
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION=${GITHUB_REF_NAME}
          else
            SHORT_SHA=$(git rev-parse --short HEAD)
            BRANCH=$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g')
            VERSION="${BRANCH}-${SHORT_SHA}"
          fi
          DOCKER_TAG="${DOCKER_USER}/konecta-${SERVICE}:${VERSION}"
          DOCKER_LATEST="${DOCKER_USER}/konecta-${SERVICE}:latest"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT
          echo "docker_latest=${DOCKER_LATEST}" >> $GITHUB_OUTPUT
          echo "DEBUG: Determined version: $VERSION"
          echo "DEBUG: Docker tag: $DOCKER_TAG"
          echo "DEBUG: Docker latest: $DOCKER_LATEST"

      - name: Build and Scan Docker Image
        uses: docker/build-push-action@v6
        with:
          context: backend/
          file: backend/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.docker_tag }}
          labels: |
            org.opencontainers.image.title=konecta-${{ matrix.service }}
            org.opencontainers.image.created=${{ github.run_id }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.vars.outputs.version }}

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ steps.vars.outputs.docker_tag }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Latest Tag (only if scan passed)
        if: success()
        run: |
          docker pull ${{ steps.vars.outputs.docker_tag }}
          docker tag ${{ steps.vars.outputs.docker_tag }} ${{ steps.vars.outputs.docker_latest }}
          docker push ${{ steps.vars.outputs.docker_latest }}

      - name: Scan Docker image (SARIF report)
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ steps.vars.outputs.docker_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'