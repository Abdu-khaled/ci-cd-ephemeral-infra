name: Backend CI Pipeline 

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'

  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  JAVA_VERSION: '21'


jobs:
  
# STAGE 1: SECRET SCANNING
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Gitleaks
      - name: Install Gitleaks
        run: |
          echo "Installing Gitleaks..."
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      # Run Gitleaks scan
      - name: Run Gitleaks scan
        run: |
          echo "Running Gitleaks secret scan..."
          gitleaks detect -v \
            --source . \
            --no-git \
            --redact \
            --report-format sarif \
            --report-path gitleaks.sarif \
            --exit-code 0

      # Upload SARIF to GitHub Security 
      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      # Upload Gitleaks report as artifact
      - name: Upload Gitleaks report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.sarif
          retention-days: 30


# STAGE 2: DETECT CHANGES
  detect-changes:
    name: Detect Changed Backend Services
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      changed: ${{ steps.set-matrix.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed backend services dynamically
        id: set-matrix
        shell: bash
        run: |
          echo "Detecting changed backend services..."
          git fetch origin --depth=2

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
          else
            BASE_SHA=$(git rev-parse HEAD^)
          fi

          echo "Base SHA: $BASE_SHA"
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD || true)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          SERVICES=()
          SERVICE_TYPES=()
          for dir in $(ls backend); do
            if [ -d "backend/$dir" ]; then
              if echo "$CHANGED_FILES" | grep -q "^backend/$dir/"; then
                SERVICES+=("$dir")
                # Detect service type
                if [ -f "backend/$dir/pom.xml" ]; then
                  SERVICE_TYPES+=("java")
                elif [ -f "backend/$dir/ReportingService/ReportingService.csproj" ]; then
                  SERVICE_TYPES+=("csharp")
                else
                  SERVICE_TYPES+=("unknown")
                fi
              fi
            fi
          done

          if [ ${#SERVICES[@]} -eq 0 ]; then
            echo "No changed backend services detected â€” skipping build."
            MATRIX_JSON='{"include":[]}'
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            # Create proper matrix with service and serviceType pairs
            MATRIX_INCLUDES=""
            for i in "${!SERVICES[@]}"; do
              if [ $i -gt 0 ]; then
                MATRIX_INCLUDES="$MATRIX_INCLUDES,"
              fi
              MATRIX_INCLUDES="$MATRIX_INCLUDES{\"service\":\"${SERVICES[$i]}\",\"serviceType\":\"${SERVICE_TYPES[$i]}\"}"
            done
            MATRIX_JSON="{\"include\":[$MATRIX_INCLUDES]}"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Detected services matrix: $MATRIX_JSON"

# STAGE 3: BACKEND DEPENDENCY SCANNING
  dependency-vulnerability-scan:
    name: Dependency Vulnerability Scan (SCA)
    runs-on: ubuntu-latest
    needs: [detect-changes]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy SCA on Source Code
        uses: aquasecurity/trivy-action@0.18.0
        with:
          scan-type: 'fs'                      # File system scan
          scan-ref: ./backend                  # Path to backend (adjust if needed)
          vuln-type: 'library'                 # Focus on dependencies
          severity: 'CRITICAL,HIGH'            # Only major issues
          ignore-unfixed: true                 # Ignore issues with no patch
          format: 'table'
          exit-code: '1'                       # Fail job if critical vulnerabilities found

      - name: Generate SARIF report
        uses: aquasecurity/trivy-action@0.18.0
        with:
          scan-type: 'fs'
          scan-ref: ./backend
          vuln-type: 'library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-dependency.sarif'
        continue-on-error: true

      - name: Upload Trivy SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-dependency.sarif'


# STAGE 4: BACKEND BUILD & TEST
  backend-build-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    needs: [detect-changes, dependency-vulnerability-scan]
    if: ${{ needs.detect-changes.outputs.changed == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        if: matrix.serviceType == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Set up .NET
        if: matrix.serviceType == 'csharp'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build Java Service
        if: matrix.serviceType == 'java'
        run: |
          echo "Building Java service ${{ matrix.service }}..."
          cd backend/${{ matrix.service }}
          mvn -B clean verify -DskipTests=false -Dspring.profiles.active=test || echo "Build or tests failed, continuing..."
          cd ../..

      - name: Build C# Service
        if: matrix.serviceType == 'csharp'
        run: |
          echo "Building C# service ${{ matrix.service }}..."
          dotnet restore backend/${{ matrix.service }}/ReportingService/ReportingService.csproj
          dotnet build backend/${{ matrix.service }}/ReportingService/ReportingService.csproj --configuration Release --no-restore
          
          echo "Checking if project has tests..."
          if dotnet test backend/${{ matrix.service }}/ReportingService/ReportingService.csproj --configuration Release --no-build --verbosity normal --list-tests | grep -q "No test is available"; then
            echo "No tests found in project, skipping test execution"
            mkdir -p backend/${{ matrix.service }}/ReportingService/TestResults
            echo "Created empty TestResults directory for consistency"
          else
            echo "Running tests..."
            dotnet test backend/${{ matrix.service }}/ReportingService/ReportingService.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test-results.trx" --results-directory "$(pwd)/backend/${{ matrix.service }}/ReportingService/TestResults"
          fi
          
          echo "Checking for generated test files..."
          find backend/${{ matrix.service }}/ReportingService -name "*.trx" -type f
          find backend/${{ matrix.service }}/ReportingService -name "TestResults" -type d
          ls -la backend/${{ matrix.service }}/ReportingService/TestResults/ || echo "TestResults directory not found"

      - name: Upload JAR artifacts
        if: (success() || always()) && matrix.serviceType == 'java'
        uses: actions/upload-artifact@v4
        with:
          name: jar-${{ matrix.service }}
          path: backend/${{ matrix.service }}/target/*.jar
          retention-days: 7

      - name: Upload C# build artifacts
        if: (success() || always()) && matrix.serviceType == 'csharp'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.service }}
          path: backend/${{ matrix.service }}/ReportingService/bin/Release/net8.0/
          retention-days: 7

      - name: Upload test results (Java)
        if: always() && matrix.serviceType == 'java'
        run: |
          mkdir -p reports/${{ matrix.service }}
          if [ -d "backend/${{ matrix.service }}/target/surefire-reports" ]; then
            cp backend/${{ matrix.service }}/target/surefire-reports/*.xml reports/${{ matrix.service }}/ || true
          else
            echo "No test reports found for ${{ matrix.service }}"
          fi

      - name: Upload test results (C#)
        if: always() && matrix.serviceType == 'csharp'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: backend/${{ matrix.service }}/ReportingService/TestResults/
          retention-days: 7

      - name: Publish test report (Java)
        if: always() && matrix.serviceType == 'java'
        uses: dorny/test-reporter@v1
        with:
          name: Tests - ${{ matrix.service }}
          path: reports/${{ matrix.service }}/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Publish test report (C#)
        if: always() && matrix.serviceType == 'csharp'
        run: |
          echo "Checking for TRX files..."
          TRX_FILES=$(find backend/${{ matrix.service }}/ReportingService -name "*.trx" -type f 2>/dev/null || true)
          if [ -n "$TRX_FILES" ]; then
            echo "Found TRX files, publishing test report..."
            echo "$TRX_FILES"
          else
            echo "No TRX files found, skipping test report publication"
          fi


# STAGE 5: CODE QUALITY (SONARQUBE)
  sonar-scan:
    name: Code Quality (SonarQube)
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-build-test]
    if: ${{ needs.detect-changes.outputs.changed == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        if: matrix.serviceType == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Set up .NET
        if: matrix.serviceType == 'csharp'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download test results (Java)
        if: matrix.serviceType == 'java'
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: backend/${{ matrix.service }}/target/
        continue-on-error: true

      - name: Download test results (C#)
        if: matrix.serviceType == 'csharp'
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: backend/${{ matrix.service }}/ReportingService/TestResults/
        continue-on-error: true

      - name: Ensure coverage file exists (Java)
        if: matrix.serviceType == 'java'
        run: |
          REPORT_PATH="backend/${{ matrix.service }}/target/site/jacoco/jacoco.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "No coverage report found for ${{ matrix.service }}, creating empty one..."
            mkdir -p "$(dirname "$REPORT_PATH")"
            echo '<?xml version="1.0" encoding="UTF-8"?><report name="empty"/>' > "$REPORT_PATH"
          fi

      - name: Ensure coverage file exists (C#)
        if: matrix.serviceType == 'csharp'
        run: |
          COVERAGE_PATH="backend/${{ matrix.service }}/ReportingService/TestResults"
          if [ ! -d "$COVERAGE_PATH" ]; then
            echo "No coverage report found for ${{ matrix.service }}, creating empty directory..."
            mkdir -p "$COVERAGE_PATH"
          fi

      - name: SonarQube analysis (Java)
        if: matrix.serviceType == 'java'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
        run: |
          echo "Analyzing Java service ${{ matrix.service }}..."
          mvn -B -f backend/${{ matrix.service }}/pom.xml clean verify sonar:sonar \
            -Dsonar.projectKey=konecta-erp-${{ matrix.service }} \
            -Dsonar.host.url=${{ env.SONAR_URL }} \
            -Dsonar.token=${{ env.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=false \
            -Dsonar.coverage.jacoco.xmlReportPaths=backend/${{ matrix.service }}/target/site/jacoco/jacoco.xml \
            -DskipTests
          echo "SonarQube analysis completed for ${{ matrix.service }}"

      - name: Install SonarQube Scanner for .NET
        if: matrix.serviceType == 'csharp'
        run: |
          echo "Installing SonarQube Scanner for .NET..."
          dotnet tool install --global dotnet-sonarscanner
          echo "SonarQube Scanner installed successfully"

      - name: SonarQube analysis (C#)
        if: matrix.serviceType == 'csharp'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
        run: |
          echo "Analyzing C# service ${{ matrix.service }}..."
          dotnet sonarscanner begin \
            /k:"konecta-erp-${{ matrix.service }}" \
            /d:sonar.host.url="${{ env.SONAR_URL }}" \
            /d:sonar.token="${{ env.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="backend/${{ matrix.service }}/ReportingService/TestResults/**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/bin/**,**/obj/**,**/TestResults/**" \
            /d:sonar.qualitygate.wait=false

          dotnet build backend/${{ matrix.service }}/ReportingService/ReportingService.csproj --configuration Release

          dotnet sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
          echo "SonarQube analysis completed for ${{ matrix.service }}"



# STAGE 6: DOCKER BUILD & SECURITY SCAN
  docker-build-scan:
    name:  Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-build-test ]
    if:  ${{ needs.detect-changes.outputs.changed == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine image tags
        id: vars
        env:
          SERVICE: ${{ matrix.service }}
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION=${GITHUB_REF_NAME}
          else
            SHORT_SHA=$(git rev-parse --short HEAD)
            BRANCH=$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g')
            VERSION="${BRANCH}-${SHORT_SHA}"
          fi

          DOCKER_TAG="${DOCKER_USER}/konecta-${SERVICE}:${VERSION}"
          DOCKER_LATEST="${DOCKER_USER}/konecta-${SERVICE}:latest"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT
          echo "docker_latest=${DOCKER_LATEST}" >> $GITHUB_OUTPUT

          echo "Version: $VERSION"
          echo "Tag: $DOCKER_TAG"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/konecta-${{ matrix.service }}
          labels: |
            org.opencontainers.image.title=konecta-${{ matrix.service }}
            org.opencontainers.image.description=Konecta ERP System - ${{ matrix.service }}
            org.opencontainers.image.version=${{ steps.vars.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: backend/
          file: ${{ matrix.serviceType == 'java' && format('backend/{0}/Dockerfile', matrix.service) || format('backend/{0}/ReportingService/Dockerfile', matrix.service) }}
          push: false
          load: true
          tags: ${{ steps.vars.outputs.docker_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/konecta-${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/konecta-${{ matrix.service }}:buildcache,mode=max
          provenance: false

      - name: Check image size
        run: |
          SIZE=$(docker image inspect ${{ steps.vars.outputs.docker_tag }} --format='{{.Size}}')
          SIZE_MB=$(($SIZE / 1024 / 1024))
          echo "Image size: ${SIZE_MB} MB"
          
          if [ $SIZE_MB -gt 1000 ]; then
            echo "WARNING: Image larger than 1GB!"
          fi

      - name: Smoke test
        timeout-minutes: 2
        run: |
          echo "Testing container startup..."
          docker run -d --name test-${{ matrix.service }} \
            -e SPRING_PROFILES_ACTIVE=smoke-test \
            ${{ steps.vars.outputs.docker_tag }}

          sleep 15 # Give it a moment to potentially crash

          if ! docker ps | grep -q test-${{ matrix.service }}; then
            echo "Container failed to start or crashed!"
            docker logs test-${{ matrix.service }}
            exit 0
          fi

          echo "Container started successfully."
          docker rm -f test-${{ matrix.service }}

      - name: Scan with Trivy (detailed)
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ steps.vars.outputs.docker_tag }}
          format: 'json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          output: 'trivy-report.json'

      - name: Check vulnerabilities
        run: |
          echo "Security scan results:"
          cat trivy-report.json | jq '.Results[]?.Vulnerabilities[]? | {VulnerabilityID, Severity, PkgName, InstalledVersion}'

          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)

          echo ""
          echo "Summary:"
          echo "Critical: $CRITICAL"
          echo "High: $HIGH"
          
          if [ "$CRITICAL" -gt "0" ]; then
            echo "CRITICAL vulnerabilities found in image!"
            exit 1
          fi
          
          echo "No critical vulnerabilities"

      - name: Generate SBOM
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ steps.vars.outputs.docker_tag }}
          format: 'spdx-json'
          output: 'sbom-${{ matrix.service }}.spdx.json'

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json
          retention-days: 90

      - name: Generate SARIF
        if: always()
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ steps.vars.outputs.docker_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-${{ matrix.service }}

      - name: Push image
        if: success()
        run: |
          echo "Pushing secure image..."
          docker push ${{ steps.vars.outputs.docker_tag }}
          echo "Pushed: ${{ steps.vars.outputs.docker_tag }}"

      - name: Tag and push latest
        if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "Tagging as latest..."
          docker tag ${{ steps.vars.outputs.docker_tag }} ${{ steps.vars.outputs.docker_latest }}
          docker push ${{ steps.vars.outputs.docker_latest }}
          echo "Latest updated"
