pipeline {
  agent any
  environment {
    TF_DIR = "terraform"
    AWS_CREDENTIALS_ID = "aws-creds"
    SSH_CREDENTIALS_ID = "ssh-key"
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Terraform Init & Apply') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: env.AWS_CREDENTIALS_ID]]) {
          dir("${TF_DIR}") {
            sh '''
              terraform init -input=false
              terraform apply -var-file="terraform.tfvars" -auto-approve -input=false
            '''
          }
        }
      }
    }

    stage('Get outputs') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: env.AWS_CREDENTIALS_ID]]) {
          dir("${TF_DIR}") {
            script {
              def ip = sh(script: "terraform output -raw public_ip", returnStdout: true).trim()
              def instanceId = sh(script: "terraform output -raw instance_id", returnStdout: true).trim()

              echo "EC2 IP: ${ip}"
              echo "Instance ID: ${instanceId}"

              // Save for downstream jobs or debugging
              writeFile file: 'ec2_ip.txt', text: ip
              archiveArtifacts artifacts: 'ec2_ip.txt', fingerprint: true

              // Add info to build metadata
              currentBuild.description = "EC2_IP=${ip}"
              env.EC2_IP = ip
            }
          }
        }
      }
    }

    stage('Ansible configure') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, keyFileVariable: 'SSH_KEY_FILE')]) {
          script {
            def ip = readFile('terraform/ec2_ip.txt').trim()
            sh """
              echo "[ephemeral]" > /tmp/inv
              echo "${ip}" >> /tmp/inv

              ANSIBLE_HOST_KEY_CHECKING=False \
              ansible-playbook -i /tmp/inv ansible/playbook.yaml \
                --private-key $SSH_KEY_FILE -u ubuntu
            """
           }
         }
       }
    }

}

//   post {
//     success {
//       build job: 'Deploy-Pipeline', parameters: [string(name: 'EC2_IP', value: env.EC2_IP)]
//     }
//   }
}
