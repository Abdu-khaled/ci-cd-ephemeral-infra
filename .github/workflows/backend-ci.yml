name: Backend CI

# on:
#   push:
#     branches: [main, develop]
#     paths:
#       - 'backend/**'
#   pull_request:
#     branches: [main, develop]
#     paths:
#       - 'backend/**'
#   workflow_dispatch:

jobs:
  secret-scan:
    name: Secret Scanning with Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate secret detection

      - name: Run Gitleaks secret scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --redact --report=gitleaks-report.json --report-format=json --exit-code 1

      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json


  detect-changes:
    name: Detect Changed Backend Services
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed backend services dynamically
        id: set-matrix
        shell: bash
        run: |
          echo "Detecting changed backend services..."
          git fetch origin --depth=2

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
          else
            BASE_SHA=$(git rev-parse HEAD^)
          fi

          echo "Base SHA: $BASE_SHA"
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD || true)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          SERVICES=()
          for dir in $(ls backend); do
            if [ -d "backend/$dir" ]; then
              if echo "$CHANGED_FILES" | grep -q "^backend/$dir/"; then
                SERVICES+=("\"$dir\"")
              fi
            fi
          done

          if [ ${#SERVICES[@]} -eq 0 ]; then
            echo "No changed backend services detected â€” skipping build."
            MATRIX_JSON="{\"service\":[]}"
          else
            MATRIX_JSON="{\"service\":[$(IFS=,; echo "${SERVICES[*]}")]}"
          fi

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Detected services matrix: $MATRIX_JSON"

  build-test-push:
    name: Build, Test & Push Changed Services
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).service != '' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build & Test ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        run: |
          echo "Building and testing service: ${{ matrix.service }}"
          if [ -f "./mvnw" ]; then
            chmod +x mvnw
            ./mvnw -B clean verify -DskipTests=false -Dmaven.test.failure.ignore=true
          else
            mvn -B clean verify -DskipTests=false -Dmaven.test.failure.ignore=true
          fi

  sonar-scan:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [detect-changes] 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # historical analysis

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: SonarQube Analysis for backend services
        run: |
          for SERVICE in backend/*; do
            if [ -f "$SERVICE/pom.xml" ]; then
              echo " Running SonarQube scan for $SERVICE"
              mvn -f "$SERVICE/pom.xml" clean verify sonar:sonar \
                -DskipTests=true \
                -Dsonar.projectKey=konecta-erp-system-$(basename $SERVICE) \
                -Dsonar.host.url=http://ec2-63-179-243-110.eu-central-1.compute.amazonaws.com:9000 \
                -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                -Dsonar.qualitygate.wait=true
            fi
          done
