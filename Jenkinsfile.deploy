pipeline {
  agent any

  parameters {
    string(name: 'EC2_IP', defaultValue: '', description: 'IP of EC2 instance')
  }

  options {
    // Prevent multiple builds running at the same time
    disableConcurrentBuilds()
  }

  environment {
    DOCKERHUB_CRED = credentials('dockerhub-creds')
    SSH_KEY_CRED = 'ssh-key'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Prevent duplicate commit') {
      steps {
        script {
          def currentCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()

          def lastBuild = currentBuild.getPreviousBuild()
          if (lastBuild != null) {
            def lastCommit = lastBuild.getEnvVars()['GIT_COMMIT']
            if (lastCommit == currentCommit) {
              echo "Commit ${currentCommit} already built. Skipping pipeline."
              currentBuild.result = 'SUCCESS'
              return
            }
          }

          env.GIT_COMMIT = currentCommit
        }
      }
    }

    stage('Prepare index.html') {
      steps {
        script {
          def ts = sh(script: "date -u +'%Y-%m-%dT%H:%M:%SZ'", returnStdout: true).trim()
          writeFile file: 'docker/nginx/index.html', text: "<html><body><h1>Build: ${env.BUILD_NUMBER}</h1><p>Time: ${ts}</p></body></html>"
        }
      }
    }

    stage('Build image') {
      steps {
        dir('docker/nginx') {
          sh "docker build -t nginx-ci:${env.BUILD_NUMBER} ."
        }
      }
    }

    stage('Login & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh """
            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
            docker tag nginx-ci:${BUILD_NUMBER} ${DOCKER_USER}/nginx-ci:${BUILD_NUMBER}
            docker push ${DOCKER_USER}/nginx-ci:${BUILD_NUMBER}
          """
        }
      }
    }

    stage('SSH Deploy to EC2') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS'),
          file(credentialsId: env.SSH_KEY_CRED, variable: 'SSH_KEY_FILE')
        ]) {
          lock(resource: "ec2-deploy-${params.EC2_IP}") {
            script {
              def ip = params.EC2_IP
              sh """
                chmod 600 ${SSH_KEY_FILE}
                ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_FILE} ubuntu@${ip} '
                  docker pull ${DOCKER_USER}/nginx-ci:${BUILD_NUMBER} || true
                  docker rm -f web || true
                  docker run -d --name web -p 80:80 ${DOCKER_USER}/nginx-ci:${BUILD_NUMBER}
                '
              """
            }
          }
        }
      }
    }

    stage('Verify') {
      steps {
        script {
          def ip = params.EC2_IP
          sh "curl -sS http://${ip} | grep 'Build:' || (echo 'Verification failed' && exit 1)"
        }
      }
    }

  } // end stages
} // end pipeline
